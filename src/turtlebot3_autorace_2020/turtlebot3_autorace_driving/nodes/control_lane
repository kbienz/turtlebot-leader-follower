#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim

import rospy
import numpy as np
from std_msgs.msg import Float64, Float32
from geometry_msgs.msg import Twist

class ControlLane():
    def __init__(self):
        self.sub_forward_distance = rospy.Subscriber('/forward_distance', Float32, self.cbDetectObstacleAhead, queue_size=1)
        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size = 1)
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        self.sub_linear_x = rospy.Subscriber('/linear_x', Float32, self.cbGetLinearX,queue_size = 1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size = 1)

        self.lastError = 0
        self.MAX_ANG_VEL = 1.2 #Max angular velocity (rad/sec)
        self.MAX_VEL = 0.1 #Max forward velocity (meters/second)
        self.obstacleDetected = 0
        self.SAFE_DIST = 0.5 #Safe follow distance in meters
        rospy.on_shutdown(self.fnShutDown)

    def cbGetLinearX(self, linear_x_msg):
        self.linear_x = linear_x_msg.data

    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def cbDetectObstacleAhead(self, forward_distance_msg):
        if forward_distance_msg.data<self.SAFE_DIST:
            self.obstacleDetected = 1
        else:
            self.obstacleDetected = 0
            print("No obstacle detected!" )

    def cbFollowLane(self, desired_center):
        center = desired_center.data

        error = center - 500

        Kp = 0.0016 #0.0015
        Kd = 0.005   #0.005

        angular_z = Kp * error + Kd * (error - self.lastError)
        self.lastError = error

        twist = Twist()
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0

#        base = max(0, 1-abs(error)/500) #Ensures base isnt negative
#        twist.linear.x = min(1.2 * (base ** 3.1) * self.linear_x, 0.1) #1.2x; **2.2; 0.065
        twist.linear.x = min(self.linear_x, .085)
        twist.angular.z = -max(angular_z, -self.MAX_ANG_VEL) if angular_z < 0 else -min(angular_z, self.MAX_ANG_VEL)

#        if self.obstacleDetected==1:
#            twist.linear.x = 0
#            twist.angular.z = 0
#            print("Obstacle Detected! :(  Motors off")
        self.pub_cmd_vel.publish(twist)

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
